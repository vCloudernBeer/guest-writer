---
layout: post
title: "gRPC – a modern communication protocol for Microservices"
description: "Microservices is being a very popular application deployment method. One of the inherit requirement of Microservices is efficient communication between the individual elements. "
date: "2018-03-06 08:30"
author:
  name: "Anthony Chow"
  url: "atc"
  mail: "vCloudernBeer@gmail.com"
  avatar: "https://twitter.com/vCloudernBeer/profile_image?size=original"
related:
- 2017-11-15-an-example-of-all-possible-elements
---

**TL;DR:** This article explains what gRPC is in the context of Microservices.

# gRPC - a Modern Communication Protocol for Microservices
## Introduction

Microservices is a very popular application deployment method. One of the inherent requirement of Microservices is efficient communication between its individual elements.

Google, a pioneer in using containers, has been deploying container-based applications/features for over 15 years. Within Google, the container orchestration engine, Borg, is open sourced as [Kubernetes](https://kubernetes.io/).
Another not so well-known interprocess communication tool is Stubby. It is being open sourced as [gRPC](https://grpc.io/).

## What is gRPC?
gRPC can be summarized as ***protocol buffers running over HTTP/2 with multiple programming language support***.  This [website](http://www.grpc.io/docs/) has a good overview of gRPC with [FAQ](http://www.grpc.io/faq/) and [quick start guide](http://www.grpc.io/docs/quickstart/).

A gRPC client can make a **remote procedure call** to the gRPC server as if the server is a local function.

## Protocol Buffer

[Protocol buffer](https://developers.google.com/protocol-buffers/) (a.k.a protobuf) is one form of [Interface Definition Language](http://whatis.techtarget.com/definition/IDL-interface-definition-language) for structured data serialization and de-serialization between two parties. In Protocol buffer, the structured data are defined in human readable format in a file and are transmitted over the wire in binary format with the characteristics of being flexible and efficient. This is why gRPC is also flexible and efficient. A file with the structured data has the extension of **.proto**.  This is an example of a structured data format taken from the Google developer website:

message Person {

    required string name = 1;
    required int32 id = 2;
    optional string email = 3;
}

The protobuf compiler is able to generate programming language specific stubs for message exchange between a client application and a server application.

This [page](https://github.com/google/protobuf) details the protobuf compiler and runtime for different popular programming languages such as Java, Python, Go JavaScript, and so on. It also has a link to a quick start guide for using protobuf.

## HTTP/2

Hypertext Transfer Protocol Version 2 ([HTTP/2](https://developers.google.com/web/fundamentals/performance/http2/)) is defined by [RFC 7540](https://tools.ietf.org/pdf/rfc7540.pdf) aimed at providing better performance for HTTP traffics with bi-directional streaming and flow control on a single TCP connection.
This [website](http://www.http2demo.io/) demonstrates the performance difference between HTTP and HTTP/2.

### Multiplexing
Multiple gRPC connections can be established over a single TCP/IP connection and this reduces the overhead of TCP connect and disconnect that exists in HTTP/1.

### Bi-directional streaming
HTTP/2 has bi-directional streaming built-in allowing gRPC to support streaming of data from a client, streaming of data from a server or in both directions. This capability greatly improves the transmission of data over HTTP flow.

## Multiple programming language support
gRPC has a command line compiler to generate stubs and source code in different languages that can be used for the gRPC client and server. This feature facilitates the gRPC code to be up and running rapidly.

![alt text](./multi-lang_support.jpg)

**Image source**: Google gRPC meetup kit

## Advantage of using gRPC
In a microservices environment, individual service can be written in different programming languages. This gRPC’s multi-language feature allows a developer to simply define the rules for the communication and do not have to worry about making networking calls between the services.

Another advantage of using gRPC is its proven track record. gRPC is being battle tested in Google’s data center with heavy work load and variation of use cases.  A Google developer advocate stated in one of his presentation that at Google 10,000,000,000 gRPC calls are made in a second with very low latency and jitter rate.

## Getting started with gRPC
This [website](https://grpc.io/docs/quickstart/) has a good getting started guide for gRPC in different languages.  We can check out the source code [here](https://github.com/grpc/grpc). The source code has good example code that we can follow and understand how gRPC works. The code for go gRPC is [here](https://github.com/grpc/grpc-go) and for Java [here](https://github.com/grpc/grpc-go).

Getting started with gRPC can be as simple as in the following four steps:
1. Define the gRPC service and the method request and response types using protocol buffers.
2. Generate the gRPC client and server interfaces from your .proto service definition.
3. Create the server.
4. Create the client.

## Built-in authentication method in gRPC
Microservices is a new way of delivering software features. It also introduces new security concerns in which the traditional firewall is not suited to secure. gRPC has built-in security to augment this need.
Before getting into the built-in authentication methods, we need to understand the difference between authentication and authorization.

Authentication is the process to determine who you claim to be by the credential you provide. A credential can be of three types:
* Something you have – smart token device
* Something you know - password
* Something you are – fingerprint

Authorization is the process to grant access to a resource based on user credential. Access type can be:
* Read-Write
* Read-only
* Delete

## Built-in Authentication method for gRPC

There are three built-in authentication methods for gRPC:
1. Digital certificate-based SSL/TLS,
2. Token-based authentication with Google which can further divide into JWT (JASON Web Token) and OAuth Access Token.
3. Credential plugin API that allows developers to plug in their own type of credentials.

Credentials used in gRPC can be further divided into **channel credential** and **call credential**. Communication between 2 gRPC entities is via a channel. The channel credential allows the channels to establish secured communication between the 2 parties. Call credential is used for each gRPC call such that the gRPC server can determine if the calling gRPC client has the proper credential to perform the desired action.
